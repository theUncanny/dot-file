nore ; :
nore \ ;

set backspace=indent,eol,start
set textwidth=80
set cc=+1

map <Leader>p :CtrlP<CR>

set wmh=0 " no current line on minimized windows
nmap <silent> <C-K> :wincmd k<CR>
nmap <silent> <C-J> :wincmd j<CR>
nmap <silent> <C-H> :wincmd h<CR>
nmap <silent> <C-L> :wincmd l<CR>

set splitbelow
set splitright

color base16-brewer
set background=dark

inoremap jj <ESC>

" Status Line: {{{
" Status Function: {{{2
function! Status(winnum)
let active = a:winnum == winnr()
let bufnum = winbufnr(a:winnum)
let stat = ''
" this function just outputs the content colored by the
" supplied colorgroup number, e.g. num = 2 -> User2
" it only colors the input if the window is the currently
" focused one
function! Color(active, num, content)
if a:active
return '%' . a:num . '*' . a:content . '%*'
else
return a:content
endif
endfunction
" this handles alternative statuslines
let usealt = 0
let altstat = Color(active, 4, ' »')
let type = getbufvar(bufnum, '&buftype')
let name = bufname(bufnum)
if type ==# 'help'
let altstat .= ' ' . fnamemodify(name, ':t:r')
let usealt = 1
elseif name ==# '__Gundo__'
let altstat .= ' Gundo'
let usealt = 1
elseif name ==# '__Gundo_Preview__'
let altstat .= ' Gundo Preview'
let usealt = 1
endif
if usealt
let altstat .= Color(active, 4, ' «')
return altstat
endif
" column
" this might seem a bit complicated but all it amounts to is
" a calculation to see how much padding should be used for the
" column number, so that it lines up nicely with the line numbers
" an expression is needed because expressions are evaluated within
" the context of the window for which the statusline is being prepared
" this is crucial because the line and virtcol functions otherwise
" operate on the currently focused window
function! Column()
let vc = virtcol('.')
let ruler_width = max([strlen(line('$')), (&numberwidth - 1)]) + &l:foldcolumn
let column_width = strlen(vc)
let padding = ruler_width - column_width
let column = ''
if padding <= 0
let column .= vc
else
" + 1 becuase for some reason vim eats one of the spaces
let column .= repeat(' ', padding + 1) . vc
endif
return column . ' '
endfunction
let stat .= '%1*'
let stat .= '%{Column()}'
let stat .= '%*'
" file name
let stat .= Color(active, 4, active ? ' »' : ' «')
let stat .= ' %<'
let stat .= '%f'
let stat .= ' ' . Color(active, 4, active ? '«' : '»')
" file modified
let modified = getbufvar(bufnum, '&modified')
let stat .= Color(active, 2, modified ? ' +' : '')
" read only
let readonly = getbufvar(bufnum, '&readonly')
let stat .= Color(active, 2, readonly ? ' ‼' : '')
" paste
if active
if &spell
let stat .= ' %2*' . 'S' . '%*'
endif
if &paste
let stat .= ' %2*' . 'P' . '%*'
endif
endif
" right side
let stat .= '%='
" git branch
if exists('*fugitive#head')
let head = fugitive#head()
if empty(head) && exists('*fugitive#detect') && !exists('b:git_dir')
call fugitive#detect(getcwd())
let head = fugitive#head()
endif
endif
if !empty(head)
let stat .= Color(active, 3, ' ← ') . head . ' '
endif
return stat
endfunction
" }}}
" Status AutoCMD: {{{
function! s:RefreshStatus()
for nr in range(1, winnr('$'))
call setwinvar(nr, '&statusline', '%!Status(' . nr . ')')
endfor
endfunction
augroup status
autocmd!
autocmd VimEnter,WinEnter,BufWinEnter * call <SID>RefreshStatus()
augroup END
" }}}
" }}}
